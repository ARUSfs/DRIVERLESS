import rospy
from geometry_msgs.msg import Point
from common_msgs.msg import Trajectory
from fssim_common.msg import State
from visualization_msgs.msg import Marker,MarkerArray
from common_msgs.srv import MPCCurrentState, MPCCurrentStateResponse
import numpy as np
from scipy.interpolate import splprep, splev
import time
import math


class MPCHandle():

    def __init__(self):

        self.si=0
        self.dist=0
        self.phi=0
        self.vx=0
        self.delta=0
        self.par=0

        self.FIRST_LAP = True
        self.t_first_lap = 0

        self.x = []
        self.y = []
        self.s = []

        self.sk_pub = rospy.Publisher('/controller/sk',Trajectory,queue_size=1)
        self.pub_curva = rospy.Publisher('/mpc/curva', MarkerArray, queue_size=1)

        rospy.Subscriber('/delaunay/global_route',Trajectory,self.set_mpc_route,queue_size=1)
        rospy.Subscriber('/fssim/base_pose_ground_truth', State, self.update_mpc_state, queue_size=1)

        rospy.Service('get_x_msg', MPCCurrentState, self.get_x_msg)
        


    def get_x_msg(self,req):
        m = MPCCurrentStateResponse(self.si,self.dist,self.phi,self.vx,self.par,self.delta)
        return m
    

    def update_mpc_state(self, msg:State):
        if (not self.FIRST_LAP):
            x = self.x
            y = self.y
            s = self.s

            dx=np.array(x)-msg.x
            dy=np.array(y)-msg.y
            dist = [np.linalg.norm([dx[i],dy[i]]) for i in range(len(x))]
            i=np.argmin(dist)

            if x[i]!=x[i+1]:
                recta=(y[i+1]-y[i])/(x[i+1]-x[i])*(msg.x-x[i])+y[i]-msg.y
                signo_d=np.sign(recta)*np.sign(x[i]-x[i+1])
            else:
                signo_d=np.sign(y[i+1]-y[i])*np.sign(msg.x-x[i])

            d_min=np.min(dist)*signo_d

            corrected_yaw = (msg.yaw+np.pi)%(2*np.pi) - np.pi
            theta = np.arctan2(y[(i+5)%len(x)]-y[i],x[(i+5)%len(x)]-x[i])
            phi = corrected_yaw - theta
            phi_corrected = corrected_yaw - theta if np.abs(phi)<2 else (phi-2*np.pi if phi>0 else phi+2*np.pi)

            self.si = s[i]
            self.dist = d_min+0.0001
            self.phi = phi_corrected
            self.vx = msg.vx
     

    def set_virtual_mpc_route(self):
        if self.FIRST_LAP:

            self.x=[0.82408,1.1258,1.428,1.7305,2.0335,2.3368,2.6406,2.9447,3.2491,3.5539,3.859,4.1644,4.4702,4.7762,5.0826,5.3892,5.696,6.0031,6.3105,6.618,6.9258,7.2338,7.542,7.8504,8.1589,8.4676,8.7764,9.0854,9.3944,9.7036,10.0129,10.3223,10.6318,10.9413,11.2508,11.5604,11.8701,12.1797,12.4894,12.7991,13.1087,13.4183,13.7279,14.0374,14.347,14.6565,14.966,15.2755,15.5849,15.8944,16.2039,16.5133,16.8228,17.1322,17.4417,17.7511,18.0606,18.3701,18.6795,18.9891,19.2986,19.6081,19.9177,20.2273,20.5369,20.8465,21.1561,21.4657,21.7753,22.085,22.3946,22.7042,23.0138,23.3234,23.633,23.9426,24.2522,24.5617,24.8712,25.1807,25.4902,25.7997,26.1091,26.4185,26.7279,27.0372,27.3466,27.656,27.9653,28.2747,28.5841,28.8935,29.2029,29.5124,29.8218,30.1313,30.4409,30.7505,31.0601,31.3698,31.6795,31.9893,32.2992,32.6091,32.919,33.2289,33.5387,33.8486,34.1583,34.468,34.7776,35.0871,35.3965,35.7058,36.0148,36.3237,36.6324,36.941,37.2492,37.5573,37.865,38.1725,38.479,38.7841,39.0871,39.3874,39.6842,39.9771,40.2653,40.5482,40.8251,41.0955,41.3587,41.6141,41.861,42.0988,42.3268,42.5445,42.7511,42.9461,43.1288,43.2987,43.456,43.6009,43.7341,43.8557,43.9664,44.0663,44.1561,44.2359,44.3064,44.3678,44.4206,44.4651,44.5019,44.5312,44.5534,44.5691,44.5786,44.5822,44.5804,44.5736,44.5618,44.545,44.5231,44.4962,44.4641,44.4268,44.3842,44.3365,44.2834,44.225,44.1612,44.0919,44.0172,43.937,43.8512,43.7599,43.6629,43.5602,43.4519,43.3377,43.2179,43.0922,42.9608,42.8237,42.6808,42.5321,42.3777,42.2176,42.0517,41.88,41.7026,41.5195,41.3306,41.136,40.9357,40.7296,40.5178,40.3003,40.077,39.848,39.6135,39.3738,39.1291,38.8796,38.6257,38.3675,38.1055,37.8397,37.5705,37.2982,37.023,36.7452,36.465,36.1827,35.8986,35.6129,35.3259,35.0378,34.749,34.4596,34.1697,33.8794,33.5885,33.2972,33.0053,32.713,32.4201,32.1266,31.8327,31.5381,31.2431,30.9474,30.6512,30.3544,30.057,29.7589,29.4603,29.1611,28.8612,28.5607,28.2596,27.9579,27.6558,27.3532,27.0503,26.7471,26.4437,26.1401,25.8363,25.5325,25.2287,24.9249,24.6212,24.3177,24.0144,23.7115,23.4088,23.1066,22.8048,22.5036,22.203,21.9033,21.6046,21.3071,21.011,20.7164,20.4236,20.1328,19.844,19.5575,19.2734,18.992,18.7134,18.4378,18.1654,17.8963,17.6307,17.3689,17.1109,16.857,16.607,16.3607,16.1178,15.8781,15.6413,15.4072,15.1755,14.9459,14.7183,14.4924,14.2679,14.0445,13.8221,13.6003,13.3789,13.1577,12.9365,12.7148,12.4926,12.2695,12.0454,11.8202,11.5936,11.3655,11.1358,10.9044,10.671,10.4355,10.1978,9.9577,9.7151,9.4698,9.2216,8.9705,8.7163,8.4587,8.1978,7.9332,7.6649,7.3928,7.1168,6.8373,6.5543,6.2682,5.9791,5.6872,5.3927,5.0958,4.7967,4.4956,4.1928,3.8883,3.5825,3.2755,2.9675,2.6587,2.3494,2.0397,1.7297,1.4199,1.1104,0.802,0.49505,0.19015,-0.11217,-0.41139,-0.70697,-0.99837,-1.2851,-1.5665,-1.8422,-2.1116,-2.3742,-2.6294,-2.8766,-3.1155,-3.3454,-3.5658,-3.7761,-3.9759,-4.165,-4.3434,-4.511,-4.668,-4.8143,-4.9499,-5.0749,-5.1893,-5.293,-5.3862,-5.4688,-5.5409,-5.6024,-5.6534,-5.6939,-5.7239,-5.7435,-5.7525,-5.7512,-5.7395,-5.7181,-5.688,-5.6504,-5.6063,-5.5568,-5.5031,-5.4462,-5.3871,-5.327,-5.267,-5.2081,-5.1514,-5.0981,-5.0492,-5.0058,-4.969,-4.9398,-4.9194,-4.9089,-4.9092,-4.9206,-4.9425,-4.9744,-5.0159,-5.0663,-5.1252,-5.1921,-5.2664,-5.3477,-5.4353,-5.5289,-5.6279,-5.7318,-5.8401,-5.9522,-6.0677,-6.1859,-6.3065,-6.429,-6.5526,-6.6769,-6.8009,-6.9238,-7.0448,-7.1631,-7.2777,-7.3879,-7.4928,-7.5916,-7.6835,-7.7675,-7.843,-7.909,-7.9647,-8.0092,-8.0418,-8.0616,-8.0677,-8.0594,-8.0358,-7.9969,-7.9433,-7.8758,-7.7949,-7.7013,-7.5957,-7.4788,-7.3511,-7.2134,-7.0663,-6.9104,-6.7465,-6.5751,-6.3969,-6.2126,-6.0229,-5.8283,-5.6296,-5.4274,-5.2224,-5.0147,-4.8043,-4.591,-4.3748,-4.1555,-3.9329,-3.7071,-3.4778,-3.2449,-3.0083,-2.7679,-2.5236,-2.2753,-2.0227,-1.7659,-1.5047,-1.2389,-0.9685,-0.69332,-0.41325,-0.12843,0.16083,0.45418,0.75129,1.0518,1.3555,1.6618,1.9706,2.2815,2.5941,2.9081,3.2232,3.5391,3.8553,4.1716,4.4876,4.803,5.1174,5.4306,5.7422,6.0521,6.3604,6.6674,6.9732,7.2779,7.5818,7.885,8.1876,8.4899,8.7919,9.0939,9.3961,9.6985,10.0014,10.3049,10.6092,10.9144,11.2208,11.5284,11.8375,12.1479,12.4593,12.7715,13.0839,13.3963,13.7083,14.0196,14.3299,14.6387,14.9458,15.2508,15.5533,15.853,16.1496,16.4427,16.7319,17.017,17.2975,17.5731,17.8435,18.1086,18.3686,18.6235,18.8737,19.1192,19.3603,19.5971,19.8297,20.0584,20.2834,20.5048,20.7227,20.9374,21.149,21.3578,21.5638,21.7673,21.9683,22.1672,22.3641,22.559,22.752,22.9431,23.1323,23.3195,23.5049,23.6884,23.87,24.0498,24.2277,24.4038,24.578,24.7503,24.9209,25.0896,25.2565,25.4216,25.5849,25.7464,25.9061,26.0638,26.2192,26.3718,26.5211,26.6667,26.8083,26.9454,27.0776,27.2044,27.3254,27.4403,27.5485,27.6497,27.7434,27.8292,27.9068,27.9756,28.0352,28.0852,28.1253,28.155,28.1741,28.1824,28.1797,28.1658,28.1403,28.1032,28.0541,27.9928,27.9192,27.8329,27.7338,27.6215,27.496,27.357,27.2042,27.0374,26.8564,26.6609,26.4508,26.2263,25.9883,25.7377,25.4754,25.2024,24.9196,24.628,24.3284,24.0217,23.709,23.3912,23.0691,22.7437,22.416,22.0868,21.7571,21.4278,21.0999,20.7742,20.4517,20.1329,19.8175,19.5054,19.1962,18.8897,18.5857,18.284,17.9842,17.6862,17.3897,17.0945,16.8003,16.5069,16.214,15.9215,15.629,15.3363,15.0432,14.7494,14.4547,14.159,13.8623,13.5646,13.2662,12.9669,12.6669,12.3663,12.0651,11.7633,11.4611,11.1585,10.8556,10.5524,10.249,9.9455,9.6419,9.3383,9.0348,8.7314,8.4282,8.1252,7.8225,7.5201,7.218,6.9162,6.6149,6.314,6.0134,5.7134,5.4139,5.1148,4.8163,4.5184,4.2211,3.9244,3.6284,3.333,3.0384,2.7445,2.4514,2.1591,1.8679,1.578,1.2896,1.003,0.71839,0.43595,0.15592,-0.12146,-0.39597,-0.66739,-0.9355,-1.2001,-1.4609,-1.7177,-1.9703,-2.2185,-2.462,-2.7006,-2.9342,-3.1626,-3.3862,-3.6054,-3.8207,-4.0322,-4.2405,-4.4458,-4.6487,-4.8493,-5.0482,-5.2457,-5.4421,-5.6379,-5.8334,-6.029,-6.225,-6.4219,-6.62,-6.8196,-7.0212,-7.225,-7.4308,-7.6385,-7.848,-8.059,-8.2716,-8.4854,-8.7004,-8.9165,-9.1334,-9.3511,-9.5693,-9.788,-10.0071,-10.2263,-10.4455,-10.6645,-10.8833,-11.1017,-11.3195,-11.5367,-11.7531,-11.9689,-12.184,-12.3983,-12.6119,-12.8248,-13.0368,-13.2482,-13.4587,-13.6684,-13.8773,-14.0854,-14.2926,-14.499,-14.7046,-14.9092,-15.113,-15.3159,-15.5178,-15.7189,-15.9192,-16.1189,-16.3181,-16.5169,-16.7155,-16.9141,-17.1126,-17.3114,-17.5105,-17.71,-17.9101,-18.1109,-18.3126,-18.5152,-18.719,-18.924,-19.1305,-19.3384,-19.548,-19.7591,-19.9713,-20.1838,-20.396,-20.6072,-20.8169,-21.0244,-21.2291,-21.4303,-21.6274,-21.8198,-22.0068,-22.1877,-22.362,-22.529,-22.6881,-22.8386,-22.98,-23.1114,-23.2325,-23.3427,-23.4426,-23.5327,-23.6137,-23.6859,-23.75,-23.8065,-23.856,-23.8991,-23.9362,-23.9679,-23.9948,-24.0174,-24.0363,-24.052,-24.0651,-24.0761,-24.0856,-24.0941,-24.1021,-24.1101,-24.1179,-24.1254,-24.1324,-24.1387,-24.1442,-24.1488,-24.1521,-24.1542,-24.1548,-24.1537,-24.1508,-24.146,-24.139,-24.1298,-24.1181,-24.1037,-24.0866,-24.0665,-24.0434,-24.017,-23.9874,-23.9548,-23.9192,-23.8806,-23.8391,-23.7948,-23.7479,-23.6982,-23.646,-23.5913,-23.5342,-23.4746,-23.4129,-23.3489,-23.2827,-23.2145,-23.1443,-23.0722,-22.9982,-22.9225,-22.8452,-22.7665,-22.6865,-22.6054,-22.5234,-22.4407,-22.3574,-22.2737,-22.1897,-22.1057,-22.0218,-21.9381,-21.8549,-21.7723,-21.6905,-21.6096,-21.5298,-21.4513,-21.3742,-21.2987,-21.2243,-21.1505,-21.0771,-21.0036,-20.9295,-20.8544,-20.778,-20.6997,-20.6193,-20.5361,-20.45,-20.3603,-20.2668,-20.1689,-20.0663,-19.9585,-19.8452,-19.7258,-19.6001,-19.4676,-19.3286,-19.1831,-19.0315,-18.8738,-18.7104,-18.5412,-18.3667,-18.1868,-18.0019,-17.8121,-17.6176,-17.4186,-17.2152,-17.0078,-16.7964,-16.5812,-16.3625,-16.1404,-15.9151,-15.6868,-15.4555,-15.2213,-14.9842,-14.7443,-14.5017,-14.2563,-14.0083,-13.7577,-13.5045,-13.2488,-12.9906,-12.73,-12.467,-12.2017,-11.9341,-11.6643,-11.3923,-11.1182,-10.8421,-10.5639,-10.2838,-10.0017,-9.7179,-9.4324,-9.1452,-8.8564,-8.5661,-8.2743,-7.9812,-7.6868,-7.3912,-7.0945,-6.7966,-6.4978,-6.198,-5.8974,-5.596,-5.2939,-4.9911,-4.6878,-4.384,-4.0796,-3.7748,-3.4696,-3.1639,-2.8579,-2.5515,-2.2449,-1.9379,-1.6307,-1.3233,-1.0158,-0.70808,-0.40025,-0.092355,0.21559]
            self.y=[-0.35605,-0.35129,-0.34603,-0.34028,-0.33407,-0.32741,-0.32033,-0.31285,-0.30499,-0.29677,-0.28821,-0.27934,-0.27017,-0.26072,-0.25102,-0.24108,-0.23094,-0.2206,-0.21009,-0.19943,-0.18864,-0.17774,-0.16676,-0.15571,-0.14462,-0.1335,-0.12238,-0.11128,-0.10022,-0.089213,-0.078292,-0.067472,-0.056775,-0.046222,-0.035834,-0.025632,-0.015636,-0.0058686,0.0036503,0.012899,0.021858,0.030508,0.038845,0.046869,0.054577,0.06197,0.069045,0.075802,0.08224,0.088357,0.094153,0.099626,0.10478,0.1096,0.1141,0.11827,0.12211,0.12563,0.12881,0.13166,0.13418,0.13636,0.13818,0.13961,0.14062,0.14119,0.14128,0.14086,0.13992,0.13841,0.13632,0.13361,0.13026,0.12623,0.1215,0.11604,0.10983,0.10283,0.095016,0.08636,0.076833,0.066438,0.055297,0.043563,0.031388,0.018927,0.0063315,-0.0062453,-0.018651,-0.030731,-0.042335,-0.053307,-0.063497,-0.07275,-0.080915,-0.087837,-0.093365,-0.097344,-0.099623,-0.10005,-0.098467,-0.094841,-0.089595,-0.083267,-0.076397,-0.069524,-0.063186,-0.057922,-0.054272,-0.052774,-0.053968,-0.058392,-0.066585,-0.079087,-0.096437,-0.11917,-0.14783,-0.18296,-0.22509,-0.27476,-0.33251,-0.3988,-0.47372,-0.55728,-0.64951,-0.75042,-0.86001,-0.97831,-1.1053,-1.2411,-1.3856,-1.5388,-1.7008,-1.8716,-2.0512,-2.2396,-2.4369,-2.643,-2.8579,-3.0817,-3.3144,-3.5559,-3.8058,-4.0636,-4.3288,-4.6009,-4.8794,-5.1638,-5.4536,-5.7483,-6.0474,-6.3505,-6.6569,-6.9662,-7.278,-7.5917,-7.9067,-8.2227,-8.5391,-8.8554,-9.1712,-9.4859,-9.7995,-10.112,-10.4232,-10.7333,-11.042,-11.3494,-11.6555,-11.9602,-12.2635,-12.5653,-12.8657,-13.1644,-13.4616,-13.7572,-14.0512,-14.3434,-14.6339,-14.9227,-15.2096,-15.4947,-15.7777,-16.0584,-16.3367,-16.6123,-16.885,-17.1546,-17.4209,-17.6837,-17.9427,-18.1978,-18.4488,-18.6953,-18.9373,-19.1746,-19.4068,-19.6338,-19.8555,-20.0715,-20.2817,-20.4858,-20.6841,-20.8766,-21.0635,-21.2448,-21.4207,-21.5914,-21.7569,-21.9174,-22.073,-22.2239,-22.3702,-22.5119,-22.6493,-22.7825,-22.9116,-23.0366,-23.1579,-23.2754,-23.3893,-23.4997,-23.607,-23.7112,-23.8128,-23.9118,-24.0085,-24.1033,-24.1962,-24.2876,-24.3778,-24.4668,-24.5551,-24.6427,-24.73,-24.8172,-24.9046,-24.9924,-25.0807,-25.17,-25.2603,-25.3518,-25.4441,-25.5364,-25.6281,-25.7187,-25.8074,-25.8937,-25.9768,-26.0562,-26.1312,-26.2012,-26.2655,-26.3235,-26.3747,-26.4182,-26.4536,-26.4801,-26.4971,-26.5041,-26.5003,-26.4853,-26.4592,-26.4224,-26.3751,-26.3178,-26.2507,-26.1741,-26.0884,-25.9939,-25.8909,-25.7797,-25.6606,-25.534,-25.4003,-25.2596,-25.1123,-24.9588,-24.7994,-24.6343,-24.464,-24.2887,-24.1086,-23.9241,-23.7354,-23.5427,-23.3463,-23.1464,-22.9434,-22.7373,-22.5286,-22.3174,-22.104,-21.8886,-21.6716,-21.4531,-21.2333,-21.0127,-20.7913,-20.5695,-20.3475,-20.1256,-19.9041,-19.6837,-19.4646,-19.2473,-19.0323,-18.82,-18.6108,-18.4053,-18.2038,-18.0067,-17.8146,-17.6279,-17.4469,-17.2722,-17.1042,-16.9434,-16.7901,-16.6448,-16.508,-16.3799,-16.2608,-16.1503,-16.0485,-15.9552,-15.8704,-15.7939,-15.7258,-15.6658,-15.614,-15.5702,-15.5343,-15.5062,-15.4859,-15.4733,-15.4683,-15.4707,-15.4806,-15.4978,-15.5222,-15.5538,-15.5928,-15.6393,-15.6937,-15.7562,-15.8269,-15.9061,-15.9941,-16.091,-16.1971,-16.3127,-16.4379,-16.5729,-16.7181,-16.8736,-17.0396,-17.2165,-17.4043,-17.6034,-17.814,-18.0361,-18.2693,-18.5128,-18.7661,-19.0284,-19.2991,-19.5776,-19.8631,-20.1551,-20.4528,-20.7557,-21.0629,-21.374,-21.6882,-22.0049,-22.3233,-22.6429,-22.963,-23.283,-23.6021,-23.9198,-24.2361,-24.551,-24.8646,-25.1769,-25.488,-25.7979,-26.1066,-26.4143,-26.7209,-27.0265,-27.3313,-27.6351,-27.9381,-28.2404,-28.5419,-28.8427,-29.1429,-29.4426,-29.7417,-30.0403,-30.3385,-30.6362,-30.9334,-31.2301,-31.5264,-31.8222,-32.1174,-32.4123,-32.7066,-33.0004,-33.2938,-33.5866,-33.879,-34.1708,-34.4622,-34.7531,-35.0435,-35.3333,-35.6227,-35.9116,-36.2,-36.488,-36.7756,-37.0628,-37.3497,-37.6363,-37.9226,-38.2088,-38.4947,-38.7805,-39.0662,-39.3518,-39.6374,-39.923,-40.2086,-40.4942,-40.78,-41.0659,-41.352,-41.6382,-41.9245,-42.2105,-42.4962,-42.7812,-43.0655,-43.3488,-43.6309,-43.9115,-44.1906,-44.4679,-44.7432,-45.0163,-45.2869,-45.555,-45.8203,-46.0825,-46.3416,-46.5972,-46.8493,-47.0975,-47.3416,-47.5811,-47.8159,-48.0455,-48.2695,-48.4878,-48.6998,-48.9053,-49.1039,-49.2954,-49.4792,-49.6552,-49.823,-49.9821,-50.1324,-50.2734,-50.4049,-50.5264,-50.6376,-50.7383,-50.8287,-50.9092,-50.9799,-51.0413,-51.0936,-51.1371,-51.1722,-51.1992,-51.2183,-51.23,-51.2344,-51.2319,-51.2228,-51.2075,-51.1862,-51.1592,-51.1269,-51.0895,-51.0474,-51.0009,-50.9505,-50.8967,-50.8401,-50.7811,-50.7202,-50.6581,-50.5951,-50.5319,-50.4689,-50.4066,-50.3456,-50.2864,-50.2295,-50.1754,-50.1247,-50.0778,-50.0353,-49.9976,-49.9654,-49.9391,-49.9189,-49.9051,-49.8979,-49.8975,-49.9042,-49.9182,-49.9398,-49.969,-50.0063,-50.0517,-50.1056,-50.1682,-50.2396,-50.3202,-50.4101,-50.5096,-50.6189,-50.7383,-50.8679,-51.0078,-51.1578,-51.3172,-51.4857,-51.6626,-51.8475,-52.0399,-52.2394,-52.4453,-52.6572,-52.8746,-53.097,-53.324,-53.5549,-53.7893,-54.0267,-54.2667,-54.5086,-54.7521,-54.9965,-55.2416,-55.4872,-55.7335,-55.9803,-56.2279,-56.4763,-56.7255,-56.9755,-57.2264,-57.4783,-57.7312,-57.9852,-58.2402,-58.4964,-58.7539,-59.0125,-59.2725,-59.5339,-59.7966,-60.0608,-60.3265,-60.5938,-60.8628,-61.1337,-61.4065,-61.6813,-61.9582,-62.2374,-62.519,-62.803,-63.0896,-63.3789,-63.671,-63.9659,-64.2638,-64.5649,-64.8691,-65.1767,-65.4876,-65.8021,-66.1201,-66.4406,-66.7626,-67.0851,-67.407,-67.7272,-68.0447,-68.3584,-68.6673,-68.9703,-69.2663,-69.5542,-69.8331,-70.1019,-70.3594,-70.6047,-70.8367,-71.0543,-71.2564,-71.4421,-71.6104,-71.7619,-71.897,-72.0165,-72.1209,-72.211,-72.2873,-72.3505,-72.4012,-72.44,-72.4676,-72.4846,-72.4917,-72.4894,-72.4785,-72.4595,-72.4331,-72.3998,-72.3605,-72.3156,-72.2657,-72.2113,-72.1527,-72.0901,-72.0239,-71.9545,-71.882,-71.807,-71.7296,-71.6502,-71.5692,-71.4868,-71.4033,-71.3192,-71.2346,-71.15,-71.0656,-70.9818,-70.8989,-70.8172,-70.7369,-70.6581,-70.5807,-70.5045,-70.4295,-70.3556,-70.2826,-70.2106,-70.1394,-70.0688,-69.9989,-69.9296,-69.8607,-69.7921,-69.7238,-69.6557,-69.5876,-69.5196,-69.4514,-69.383,-69.3144,-69.2454,-69.1758,-69.1055,-69.0344,-68.9625,-68.8894,-68.8152,-68.7397,-68.6627,-68.5841,-68.5039,-68.4218,-68.3378,-68.2516,-68.1633,-68.0726,-67.9795,-67.8837,-67.7852,-67.6839,-67.5795,-67.4718,-67.3607,-67.246,-67.1275,-67.0049,-66.8781,-66.747,-66.6112,-66.4706,-66.3251,-66.1744,-66.0183,-65.8567,-65.6893,-65.5159,-65.3364,-65.1506,-64.9583,-64.7593,-64.5541,-64.3432,-64.1268,-63.9057,-63.6801,-63.4506,-63.2177,-62.9818,-62.7433,-62.5028,-62.2607,-62.0174,-61.7735,-61.5294,-61.2855,-61.0424,-60.8005,-60.5602,-60.3221,-60.0864,-59.8532,-59.6222,-59.3933,-59.1663,-58.941,-58.7172,-58.4948,-58.2737,-58.0535,-57.8342,-57.6156,-57.3975,-57.1797,-56.9621,-56.7444,-56.5266,-56.3084,-56.0896,-55.8702,-55.6499,-55.4287,-55.2066,-54.9838,-54.7601,-54.5356,-54.3104,-54.0845,-53.8578,-53.6304,-53.4024,-53.1737,-52.9444,-52.7144,-52.4839,-52.2527,-52.0211,-51.7889,-51.5562,-51.323,-51.0894,-50.8553,-50.6208,-50.386,-50.151,-49.9156,-49.68,-49.4443,-49.2084,-48.9725,-48.7364,-48.5004,-48.2644,-48.0285,-47.7927,-47.557,-47.3215,-47.0863,-46.8514,-46.6167,-46.3824,-46.1482,-45.9139,-45.6793,-45.444,-45.2079,-44.9708,-44.7323,-44.4923,-44.2505,-44.0067,-43.7606,-43.512,-43.2607,-43.0064,-42.7488,-42.4878,-42.2231,-41.9545,-41.6817,-41.4046,-41.1233,-40.8381,-40.5492,-40.2569,-39.9615,-39.6631,-39.362,-39.0586,-38.7529,-38.4453,-38.1361,-37.8254,-37.5136,-37.2008,-36.8873,-36.5734,-36.2593,-35.9453,-35.6316,-35.3185,-35.0058,-34.6937,-34.382,-34.0708,-33.76,-33.4497,-33.1396,-32.83,-32.5206,-32.2115,-31.9027,-31.5941,-31.2857,-30.9774,-30.6693,-30.3614,-30.0535,-29.7456,-29.4378,-29.13,-28.8223,-28.5146,-28.207,-27.8996,-27.5924,-27.2853,-26.9785,-26.672,-26.3658,-26.06,-25.7545,-25.4495,-25.1449,-24.8409,-24.5373,-24.2343,-23.9319,-23.6302,-23.3291,-23.0287,-22.7289,-22.4296,-22.1309,-21.8325,-21.5345,-21.2367,-20.9391,-20.6415,-20.344,-20.0465,-19.7488,-19.4509,-19.1527,-18.8541,-18.5551,-18.2556,-17.9555,-17.6547,-17.3532,-17.0509,-16.748,-16.4446,-16.1411,-15.8375,-15.5341,-15.2311,-14.9286,-14.6269,-14.3262,-14.0266,-13.7285,-13.4319,-13.137,-12.8441,-12.5534,-12.265,-11.9792,-11.6962,-11.4161,-11.1392,-10.8654,-10.5948,-10.3274,-10.0633,-9.8024,-9.5448,-9.2905,-9.0394,-8.7917,-8.5474,-8.3064,-8.0688,-7.8347,-7.6039,-7.3766,-7.1527,-6.9323,-6.7155,-6.5021,-6.2923,-6.086,-5.8833,-5.6842,-5.4887,-5.2968,-5.1085,-4.9239,-4.7429,-4.5657,-4.3921,-4.2223,-4.0562,-3.8938,-3.7352,-3.5804,-3.4294,-3.2822,-3.1388,-2.9993,-2.8636,-2.7318,-2.6039,-2.48,-2.3599,-2.2438,-2.1317,-2.0235,-1.9193,-1.8191,-1.723,-1.6309,-1.5429,-1.4589,-1.379,-1.3033,-1.2316,-1.1641,-1.1008,-1.0416,-0.98662,-0.93584,-0.88928,-0.84696,-0.80889,-0.77509,-0.74558,-0.72037,-0.69948,-0.68293,-0.67073,-0.66289,-0.65944,-0.66039,-0.66576,-0.67556,-0.68981,-0.70852,-0.73172]

            route = np.array([[self.x[i], self.y[i]] for i in range(len(self.x))])
            
            tck, u = splprep(route.T, s=3, per=True)  
            u_new = np.linspace(u.min(), u.max(), 1000)
            puntos_curva = np.array(splev(u_new, tck))


            acum=0
            s=[]
            s.append(0)
            xp = []
            yp = []
            for i in range(len(puntos_curva[0])-1):
                p1=puntos_curva[:,i]
                p2=puntos_curva[:,i+1]
                xp.append(p2[0]-p1[0])
                yp.append(p2[1]-p1[1])
                acum+=np.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)
                s.append(acum)
            self.s = s
            xp.append(xp[-1])
            yp.append(yp[-1])


            xpp=[]
            ypp=[]
            for i in range(len(xp)-1):
                xpp.append(xp[i+1]-xp[i])
                ypp.append(yp[i+1]-yp[i])
            xpp.append(xpp[-1])
            ypp.append(xpp[-1])

            k=[]
            for i in range(len(xpp)):
                if xp[i]!=yp[i]:
                    k.append((xp[i]*ypp[i] - xpp[i]*yp[i])/(xp[i]**2+yp[i]**2)**1.5)
                else:
                    k.append(0)
            
            

            sk_msg = Trajectory()
            sk_msg.trajectory = [Point(s[i],k[i],0) for i in range(len(s))]

            # self.subscribe_topics()
            self.FIRST_LAP=False
            self.t_first_lap = time.time()
            
            self.sk_pub.publish(sk_msg)

            curvas = MarkerArray()
            curva = Marker()
            curva.header.frame_id = "map"
            curva.ns = 'mpc'
            curva.id = 0
            curva.action = Marker.ADD
            curva.type = Marker.LINE_STRIP
            curva.points = [Point(p[0],p[1],0) for p in puntos_curva.T]
            curva.color.r = 1
            curva.color.g = 0.5
            curva.color.a = 1
            curva.scale.x = 0.1
            curva.pose.orientation.x = 0.0
            curva.pose.orientation.y = 0.0
            curva.pose.orientation.z = 0.0
            curva.pose.orientation.w = 1.0
            curvas.markers.append(curva)

            self.pub_curva.publish(curvas)

            
    def set_mpc_route(self, msg:Trajectory):
        if self.FIRST_LAP:

            route = np.array([[msg.trajectory[i].x,msg.trajectory[i].y] for i in range(0,len(msg.trajectory),2)])
            
            tck, u = splprep(route.T, s=3, per=True)  
            u_new = np.linspace(u.min(), u.max(), 1000)
            puntos_curva = np.array(splev(u_new, tck))
            self.x = puntos_curva[0]
            self.y = puntos_curva[1]


            acum=0
            s=[]
            s.append(0)
            xp = []
            yp = []
            for i in range(len(puntos_curva[0])-1):
                p1=puntos_curva[:,i]
                p2=puntos_curva[:,i+1]
                xp.append(p2[0]-p1[0])
                yp.append(p2[1]-p1[1])
                acum+=np.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)
                s.append(acum)
            self.s = s
            xp.append(xp[-1])
            yp.append(yp[-1])


            xpp=[]
            ypp=[]
            for i in range(len(xp)-1):
                xpp.append(xp[i+1]-xp[i])
                ypp.append(yp[i+1]-yp[i])
            xpp.append(xpp[-1])
            ypp.append(xpp[-1])

            k=[]
            for i in range(len(xpp)):
                if xp[i]!=yp[i]:
                    k.append((xp[i]*ypp[i] - xpp[i]*yp[i])/(xp[i]**2+yp[i]**2)**1.5)
                else:
                    k.append(0)
            
            

            sk_msg = Trajectory()
            sk_msg.trajectory = [Point(s[i],k[i],0) for i in range(len(s))]

            # self.subscribe_topics()
            self.FIRST_LAP=False
            self.t_first_lap = time.time()
            
            self.sk_pub.publish(sk_msg)

            curvas = MarkerArray()
            curva = Marker()
            curva.header.frame_id = "map"
            curva.ns = 'mpc'
            curva.id = 0
            curva.action = Marker.ADD
            curva.type = Marker.LINE_STRIP
            curva.points = [Point(p[0],p[1],0) for p in puntos_curva.T]
            curva.color.r = 1
            curva.color.g = 0.5
            curva.color.a = 1
            curva.scale.x = 0.1
            curva.pose.orientation.x = 0.0
            curva.pose.orientation.y = 0.0
            curva.pose.orientation.z = 0.0
            curva.pose.orientation.w = 1.0
            curvas.markers.append(curva)

            self.pub_curva.publish(curvas)