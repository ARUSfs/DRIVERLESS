"""
Script to perform acceleration control based on Álvaro's localization

@Author: Ignacio Sánchez Isidro
@Date: 20220524
"""

# Python libs
import numpy as np
import rospy
import math
import time
import tf2_ros

# ROS msgs
from common_msgs.msg import Controls, CarState
from fssim_common.msg import State
from visualization_msgs.msg import Marker
from sensor_msgs.msg import PointCloud2
from std_msgs.msg import Float32,Bool,Int16
from geometry_msgs.msg import Point
from sklearn.cluster import KMeans, DBSCAN
from geometry_msgs.msg import PointStamped

from skidpad_localization import SkidpadLocalization

SIM_MODE = rospy.get_param('/skidpad_control/sim_mode')
KP = rospy.get_param('/skidpad_control/kp')
TARGET = rospy.get_param('/skidpad_control/target')
TRACK_LENGTH = rospy.get_param('/skidpad_control/track_length')
LQR_PARAMS = np.array([rospy.get_param('/skidpad_control/lqr_dist'),
                       rospy.get_param('/skidpad_control/lqr_yaw'),
                       rospy.get_param('/skidpad_control/lqr_beta'),
                       rospy.get_param('/skidpad_control/lqr_r')],np.float64) 

class SkidpadControl():

    def __init__(self):
        
        self.skidpad_localizator = SkidpadLocalization()

        ### Inicializaciones ###
        self.prev_time = 0
        self.prev_yaw = 0
        self.start_time = 0
        self.steer = 0
        self.acc = 0
        self.speed = 0
        self.avg_speed = 0.0001
        self.i = 0
        self.braking = False
        self.AS_status = 0

        self.tfBuffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tfBuffer)

        self.centers = []
        self.start_time = None
        self.calib_time = 5
        self.calibrated = False
        self.plantilla = np.array([[-15.0, 0], [-14.5, 0], [-14.0, 0], [-13.5, 0], [-13.0, 0], [-12.5, 0], [-12.0, 0], [-11.5, 0], [-11.0, 0], [-10.5, 0], [-10.0, 0], [-9.5, 0], [-9.0, 0], [-8.5, 0], [-8.0, 0], [-7.5, 0], [-7.0, 0], [-6.5, 0], [-6.0, 0], [-5.5, 0], [-5.0, 0], [-4.5, 0], [-4.0, 0], [-3.5, 0], [-3.0, 0], [-2.5, 0], [-2.0, 0], [-1.5, 0], [-1.0, 0], [-0.5, 0], [0.0, 0], [0.9979995752873556, -0.054739703419407704], [1.9840254079415232, -0.21830206077232717], [2.9462474132187495, -0.4887246928955644], [3.8731210985836952, -0.8627631384893206], [4.753526071566409, -1.3359297803307477], [5.576899459375653, -1.9025476865530253], [6.333362639534251, -2.555818721016159], [7.013839761054889, -3.287905105598722], [7.610166634169747, -4.09002345584714], [8.115188682182861, -4.952550161766923], [8.522846780244137, -5.8651368494241805], [8.82824995117345, -6.8168345380787825], [9.027734046148865, -7.7962250032437375], [9.118905706223359, -8.791557769610568], [9.100671077230842, -9.79089109023472], [8.973248933567604, -10.782235220548937], [8.738168053393238, -11.753696268239803], [8.398248876742883, -12.693618893113538], [7.957569666611924, -13.590726144874743], [7.421417579003787, -14.434254761080277], [6.796225228989897, -15.214084301998227], [6.089493513845838, -15.920858573045019], [5.309701619211953, -16.546097878005515], [4.466205288001365, -17.082300756250742], [3.5691245725989127, -17.523033983336255], [2.629222417071311, -17.863009755177075], [1.6577755261280096, -18.09814912976325], [0.6664390701137606, -18.225630965258723], [-0.33289315073229986, -18.243925767336606], [-1.328231405037771, -18.1528140396594], [-2.307633880015217, -17.95338891733967], [-3.259349956265517, -17.64804305178567], [-4.171961188692029, -17.24043990428414], [-5.0345183020727795, -16.735469792732523], [-5.8366725576529745, -16.139191218860567], [-6.56879991465517, -15.458758179882324], [-7.222116497049222, -14.702334336674596], [-7.788783980241325, -13.878995068270065], [-8.26200363327973, -12.998618587790043], [-8.636097888282896, -12.071767426180035], [-8.906578458441002, -11.109561705675764], [-9.070200187328588, -10.123545723432061], [-9.124999983458032, -9.12554944600997], [-9.070320372947128, -8.127546576475732], [-8.906817387721892, -7.141510896986074], [-8.636452694613979, -6.179272610424557], [-8.262470059785757, -5.252376404665185], [-7.78935643085684, -4.371942942371805], [-7.222788103658737, -3.5485354381431033], [-6.5695626194950485, -2.7920329237763006], [-5.8375172099864, -2.111511722180425], [-5.035434767977945, -1.5151365519847264], [-4.1729384726463365, -1.0100625693411498], [-3.2603763330670397, -0.6023495221981374], [-2.3086970354586516, -0.2968890470007999], [-1.3293185836570984, -0.09734598009295148], [-0.33399130883761785, -0.006114387951731359], [0.9979995752873556, -0.054739703419407704], [1.9840254079415232, -0.21830206077232717], [2.9462474132187495, -0.4887246928955644], [3.8731210985836952, -0.8627631384893206], [4.753526071566409, -1.3359297803307477], [5.576899459375653, -1.9025476865530253], [6.333362639534251, -2.555818721016159], [7.013839761054889, -3.287905105598722], [7.610166634169747, -4.09002345584714], [8.115188682182861, -4.952550161766923], [8.522846780244137, -5.8651368494241805], [8.82824995117345, -6.8168345380787825], [9.027734046148865, -7.7962250032437375], [9.118905706223359, -8.791557769610568], [9.100671077230842, -9.79089109023472], [8.973248933567604, -10.782235220548937], [8.738168053393238, -11.753696268239803], [8.398248876742883, -12.693618893113538], [7.957569666611924, -13.590726144874743], [7.421417579003787, -14.434254761080277], [6.796225228989897, -15.214084301998227], [6.089493513845838, -15.920858573045019], [5.309701619211953, -16.546097878005515], [4.466205288001365, -17.082300756250742], [3.5691245725989127, -17.523033983336255], [2.629222417071311, -17.863009755177075], [1.6577755261280096, -18.09814912976325], [0.6664390701137606, -18.225630965258723], [-0.33289315073229986, -18.243925767336606], [-1.328231405037771, -18.1528140396594], [-2.307633880015217, -17.95338891733967], [-3.259349956265517, -17.64804305178567], [-4.171961188692029, -17.24043990428414], [-5.0345183020727795, -16.735469792732523], [-5.8366725576529745, -16.139191218860567], [-6.56879991465517, -15.458758179882324], [-7.222116497049222, -14.702334336674596], [-7.788783980241325, -13.878995068270065], [-8.26200363327973, -12.998618587790043], [-8.636097888282896, -12.071767426180035], [-8.906578458441002, -11.109561705675764], [-9.070200187328588, -10.123545723432061], [-9.124999983458032, -9.12554944600997], [-9.070320372947128, -8.127546576475732], [-8.906817387721892, -7.141510896986074], [-8.636452694613979, -6.179272610424557], [-8.262470059785757, -5.252376404665185], [-7.78935643085684, -4.371942942371805], [-7.222788103658737, -3.5485354381431033], [-6.5695626194950485, -2.7920329237763006], [-5.8375172099864, -2.111511722180425], [-5.035434767977945, -1.5151365519847264], [-4.1729384726463365, -1.0100625693411498], [-3.2603763330670397, -0.6023495221981374], [-2.3086970354586516, -0.2968890470007999], [-1.3293185836570984, -0.09734598009295148], [-0.33399130883761785, -0.006114387951731359], [0.9979995752873556, 0.054739703419407704], [1.9840254079415232, 0.21830206077232717], [2.9462474132187495, 0.4887246928955644], [3.8731210985836952, 0.8627631384893206], [4.753526071566409, 1.3359297803307477], [5.576899459375653, 1.9025476865530253], [6.333362639534251, 2.555818721016159], [7.013839761054889, 3.287905105598722], [7.610166634169747, 4.09002345584714], [8.115188682182861, 4.952550161766923], [8.522846780244137, 5.8651368494241805], [8.82824995117345, 6.8168345380787825], [9.027734046148865, 7.7962250032437375], [9.118905706223359, 8.791557769610568], [9.100671077230842, 9.79089109023472], [8.973248933567604, 10.782235220548937], [8.738168053393238, 11.753696268239803], [8.398248876742883, 12.693618893113538], [7.957569666611924, 13.590726144874743], [7.421417579003787, 14.434254761080277], [6.796225228989897, 15.214084301998227], [6.089493513845838, 15.920858573045019], [5.309701619211953, 16.546097878005515], [4.466205288001365, 17.082300756250742], [3.5691245725989127, 17.523033983336255], [2.629222417071311, 17.863009755177075], [1.6577755261280096, 18.09814912976325], [0.6664390701137606, 18.225630965258723], [-0.33289315073229986, 18.243925767336606], [-1.328231405037771, 18.1528140396594], [-2.307633880015217, 17.95338891733967], [-3.259349956265517, 17.64804305178567], [-4.171961188692029, 17.24043990428414], [-5.0345183020727795, 16.735469792732523], [-5.8366725576529745, 16.139191218860567], [-6.56879991465517, 15.458758179882324], [-7.222116497049222, 14.702334336674596], [-7.788783980241325, 13.878995068270065], [-8.26200363327973, 12.998618587790043], [-8.636097888282896, 12.071767426180035], [-8.906578458441002, 11.109561705675764], [-9.070200187328588, 10.123545723432061], [-9.124999983458032, 9.12554944600997], [-9.070320372947128, 8.127546576475732], [-8.906817387721892, 7.141510896986074], [-8.636452694613979, 6.179272610424557], [-8.262470059785757, 5.252376404665185], [-7.78935643085684, 4.371942942371805], [-7.222788103658737, 3.5485354381431033], [-6.5695626194950485, 2.7920329237763006], [-5.8375172099864, 2.111511722180425], [-5.035434767977945, 1.5151365519847264], [-4.1729384726463365, 1.0100625693411498], [-3.2603763330670397, 0.6023495221981374], [-2.3086970354586516, 0.2968890470007999], [-1.3293185836570984, 0.09734598009295148], [-0.33399130883761785, 0.006114387951731359], [0.9979995752873556, 0.054739703419407704], [1.9840254079415232, 0.21830206077232717], [2.9462474132187495, 0.4887246928955644], [3.8731210985836952, 0.8627631384893206], [4.753526071566409, 1.3359297803307477], [5.576899459375653, 1.9025476865530253], [6.333362639534251, 2.555818721016159], [7.013839761054889, 3.287905105598722], [7.610166634169747, 4.09002345584714], [8.115188682182861, 4.952550161766923], [8.522846780244137, 5.8651368494241805], [8.82824995117345, 6.8168345380787825], [9.027734046148865, 7.7962250032437375], [9.118905706223359, 8.791557769610568], [9.100671077230842, 9.79089109023472], [8.973248933567604, 10.782235220548937], [8.738168053393238, 11.753696268239803], [8.398248876742883, 12.693618893113538], [7.957569666611924, 13.590726144874743], [7.421417579003787, 14.434254761080277], [6.796225228989897, 15.214084301998227], [6.089493513845838, 15.920858573045019], [5.309701619211953, 16.546097878005515], [4.466205288001365, 17.082300756250742], [3.5691245725989127, 17.523033983336255], [2.629222417071311, 17.863009755177075], [1.6577755261280096, 18.09814912976325], [0.6664390701137606, 18.225630965258723], [-0.33289315073229986, 18.243925767336606], [-1.328231405037771, 18.1528140396594], [-2.307633880015217, 17.95338891733967], [-3.259349956265517, 17.64804305178567], [-4.171961188692029, 17.24043990428414], [-5.0345183020727795, 16.735469792732523], [-5.8366725576529745, 16.139191218860567], [-6.56879991465517, 15.458758179882324], [-7.222116497049222, 14.702334336674596], [-7.788783980241325, 13.878995068270065], [-8.26200363327973, 12.998618587790043], [-8.636097888282896, 12.071767426180035], [-8.906578458441002, 11.109561705675764], [-9.070200187328588, 10.123545723432061], [-9.124999983458032, 9.12554944600997], [-9.070320372947128, 8.127546576475732], [-8.906817387721892, 7.141510896986074], [-8.636452694613979, 6.179272610424557], [-8.262470059785757, 5.252376404665185], [-7.78935643085684, 4.371942942371805], [-7.222788103658737, 3.5485354381431033], [-6.5695626194950485, 2.7920329237763006], [-5.8375172099864, 2.111511722180425], [-5.035434767977945, 1.5151365519847264], [-4.1729384726463365, 1.0100625693411498], [-3.2603763330670397, 0.6023495221981374], [-2.3086970354586516, 0.2968890470007999], [-1.3293185836570984, 0.09734598009295148], [-0.33399130883761785, 0.006114387951731359], [0, 0], [0.5, 0], [1.0, 0], [1.5, 0], [2.0, 0], [2.5, 0], [3.0, 0], [3.5, 0], [4.0, 0], [4.5, 0], [5.0, 0], [5.5, 0], [6.0, 0], [6.5, 0], [7.0, 0], [7.5, 0], [8.0, 0], [8.5, 0], [9.0, 0], [9.5, 0], [10.0, 0], [10.5, 0], [11.0, 0], [11.5, 0], [12.0, 0], [12.5, 0], [13.0, 0], [13.5, 0], [14.0, 0], [14.5, 0], [15.0, 0], [15.5, 0], [16.0, 0], [16.5, 0], [17.0, 0], [17.5, 0], [18.0, 0], [18.5, 0], [19.0, 0], [19.5, 0], [20.0, 0], [20.5, 0], [21.0, 0], [21.5, 0], [22.0, 0], [22.5, 0], [23.0, 0], [23.5, 0], [24.0, 0], [24.5, 0], [25.0, 0]])
    

        self.cmd_publisher = rospy.Publisher('/controls_pp', Controls, queue_size=1) 
        self.braking_publisher = rospy.Publisher('/braking', Bool, queue_size=10)
        self.route_pub = rospy.Publisher('/skidpad_route',Marker,queue_size=1)

        rospy.Subscriber('/perception_map', PointCloud2, self.update_route, queue_size=10)
        rospy.Subscriber('/car_state/state', CarState, self.update_speed, queue_size=1)
        rospy.Subscriber('/can/AS_status', Int16, self.update_AS_status, queue_size=1)




    def update_speed(self, msg):
        self.speed = math.hypot(msg.vx,msg.vy)

        if self.AS_status==2 and self.calibrated:
            self.acc = self.get_acc()
            self.steer = self.get_steer()
            self.publish_cmd()

        


    def update_route(self, msg: PointCloud2):
        t = time.time()
        if self.start_time == None:
            self.start_time = time.time()
        
        if time.time()-self.start_time < self.calib_time:
            C1,C2 = self.skidpad_localizator.get_centers(msg)
            rospy.logwarn([C1,C2])
            self.centers.append(C1)
            self.centers.append(C2)
        elif not self.calibrated:

            epsilon = 0.5  # Distancia máxima entre puntos para considerarlos vecinos
            min_samples = int(5*self.calib_time)  # Número mínimo de puntos para formar un clúster

            dbscan = DBSCAN(eps=epsilon, min_samples=min_samples)
            dbscan.fit(np.array(self.centers))

            centroid1_mask = dbscan.labels_ == 0
            centroid2_mask = dbscan.labels_ == 1

            centroid1 = np.mean(np.array(self.centers)[centroid1_mask],axis=0)
            centroid2 = np.mean(np.array(self.centers)[centroid2_mask],axis=0)

            if np.abs(18.25 - np.linalg.norm(centroid1-centroid2)) < 1:
                self.calibrated = True

                center = [(centroid1[0]+centroid2[0])/2,(centroid1[1]+centroid2[1])/2]
                yaw = np.pi/2-np.arctan2(centroid1[1]-centroid2[1],centroid1[0]-centroid2[0])
                
                # con esto el giro está entre -90º y 90º
                if yaw < -np.pi/2:
                    yaw = yaw+np.pi
                elif yaw > np.pi/2:
                    yaw = yaw-np.pi

                rot = np.array([[math.cos(yaw),-math.sin(yaw)],[math.sin(yaw),math.cos(yaw)]])
                self.route = self.plantilla @ rot + np.array(center)

                marker = Marker()
                marker.header.frame_id = "fssim/vehicle/cog"
                marker.header.stamp = rospy.Time().now()
                marker.id = 102
                marker.type = Marker.LINE_STRIP
                marker.action = Marker.ADD
                marker.scale.x = 0.2
                marker.color.r = 1
                marker.color.a = 1.0
                marker.points = [Point(p[0], p[1], 0.0) for p in self.route]
                self.route_pub.publish(marker)
            else:
                self.centers = []
                self.start_time = time.time()

        # rospy.loginfo(time.time()-t)



    def update_AS_status(self, msg):
        self.AS_status = msg.data


    def get_steer(self):
        try:
        
            global_pos = self.tfBuffer.lookup_transform("velodyne","map",rospy.Time(0))

            rospy.loginfo(global_pos)

            
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException) as e:
            rospy.logerr("No se pudo obtener la transformación: %s", e)

        return 0.0


    def get_acc(self):
        error = TARGET - self.speed
        cmd = KP * error

        return max(min(cmd, 1),-1)


    def publish_cmd(self):
        controls = Controls()
        controls.steering = self.steer
        controls.accelerator = self.acc
        self.cmd_publisher.publish(controls)

